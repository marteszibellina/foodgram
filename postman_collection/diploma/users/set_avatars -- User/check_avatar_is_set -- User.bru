meta {
  name: check_avatar_is_set -- User
  type: http
  seq: 2
}

get {
  url: {{baseUrl}}/api/users/me/
  body: none
  auth: apikey
}

auth:apikey {
  key: Authorization
  value: Token {{userToken}}
  placement: header
}

tests {
  const responseData = res.getBody();
  const responseSchema = {
      "type": "object",
      "properties": {
          "id": {"type": "number"},
          "username": {"type": "string"},
          "first_name": {"type": "string"},
          "last_name": {"type": "string"},
          "email": {"type": "string"},
          "is_subscribed": {"type": "boolean"},
          "avatar": {"type": "string"}
      },
      "required": ["id", "username", "first_name", "last_name", "email", "is_subscribed", "avatar"],
      "additionalProperties": false,
  };
  
  test("Статус-код ответа должен быть 200", function () {
      expect(
  //         pm.response.status,
          "Запрос зарегистрированного пользователя должен вернуть ответ со статус-кодом 200"
      ).to.be.eql("OK");
  });
  test('Структура ответа должна соответствовать ожидаемой', function () {
  //     pm.response.to.have.jsonSchema(responseSchema);
  });
  test("Поле `avatar` должно содержать ссылку на аватар", function () {
      expect(
          typeof responseData.avatar, 
          "Убедитесь, что если аватар добавлен корректно, то  в ответе на запрос к данным пользователя в поле `avatar` содержится ссылка на аватар"
      ).to.equal("string");
  });
}
