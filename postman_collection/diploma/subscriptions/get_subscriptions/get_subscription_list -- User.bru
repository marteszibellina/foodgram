meta {
  name: get_subscription_list -- User
  type: http
  seq: 1
}

get {
  url: {{baseUrl}}/api/users/subscriptions/
  body: none
  auth: apikey
}

auth:apikey {
  key: Authorization
  value: Token {{userToken}}
  placement: header
}

tests {
  const responseSchema = {
      "type": "object",
      "properties":{
          "count": {"type": "number"},
          "next": {"type": ["string", "null"]},
          "previous": {"type": ["string", "null"]},
          "results": {
              "type": "array",
              "items": {
                  "type": "object",
                  "properties": {
                      "id": {"type": "number"},
                      "username": {"type": "string"},
                      "first_name": {"type": "string"},
                      "last_name": {"type": "string"},
                      "email": {"type": "string"},
                      "is_subscribed": {"type": "boolean"},
                      "avatar": {"type": ["string", "null"]},
                      "recipes_count": {"type": "number"},
                      "recipes": {
                          "type": "array",
                          "items": {
                              "type": "object",
                              "properties": {
                                  "id": {"type": "number"},
                                  "name": {"type": "string"},
                                  "image": {"type": "string"},
                                  "cooking_time": {"type": "number"}
                              },
                              "required": ["id", "name", "image", "cooking_time"],
                              "additionalProperties": false
                          }
                      }
                  },
                  "required": [
                      "id", "username", "first_name", "last_name", "email",
                      "is_subscribed", "recipes", "recipes_count", "avatar"
                  ],
                  "additionalProperties": false
              }
          }
      },
      "required": ["count", "next", "previous", "results"],
      "additionalProperties": false
  };
  
  test("Статус-код ответа должен быть 200", function () {
      expect(
  //         pm.response.status,
          "Запрос зарегистрированного пользователя на получение перечня подписок должен вернуть ответ со статус-кодом 200"
      ).to.be.eql("OK");
  });
  test('Структура ответа должна соответствовать ожидаемой', function () {
      expect(
  //         pm.response,
          "Убедитесь, что для запрошенного эндпоинта корректно настроена пагинация"
      ).to.have.jsonSchema({"type": "object"});
  //     pm.response.to.have.jsonSchema(responseSchema);
  });
}
